//
//  MainViewController.swift
//  ToDo_MVP_Test
//
//  Created by –ò—à—Ö–∞–Ω –ë–∞–≥—Ä–∞—Ç—É–Ω–∏ on 20.01.24.
//

import UIKit

protocol ToDoListControllerProtocol: AnyObject {
    func allowAccessToNotifications()
}

// –≠—Ç–∏ —Ç–∞–π–ø–∞–ª–∏–∞—Å—ã —è –¥—É–º–∞—é –ª—É—á—à–µ –∑–∞—Å—É–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å –∫–ª–∞—Å—Å–∞. –ü—Ä–æ—Å—Ç–æ —Ç—É—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞ —Ç–∞–∫–æ–µ –¥–∂–µ–Ω–µ—Ä–∏–∫... `DataSource` –∏ `Snapshot`
typealias DataSource = DiffableDataSource
typealias Snapshot = NSDiffableDataSourceSnapshot<ToDoListController.Section, ToDoItem>

final class ToDoListController: UIViewController, UITableViewDelegate {
    
    /*
     –ü–æ –∫–æ–¥ —Å—Ç–∞–π–ª—É –º—ã –æ–±—ä—è–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∞ –ø–æ—Ç–æ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ
     –ï—â–µ –º–æ–∂–Ω–æ –∏—Ö —Ä–∞–∑–¥–µ–ª—è—Ç—å –º–∞—Ä–∫–∞–º–∏ // MARK: -
     */
    
    // MARK: - IBOutlets
    
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - Public properties
    
    weak var coordinator: AppCoordinator?
    var presenter: ToDoListPresentProtocol?
    
    // MARK: - Private properties
    
    private var viewBackgroundColor: UIColor = .systemBackground
    private var dataSource: DataSource?
    
    
    enum Section {
        case unfulfilled
        case completed
    }
    
    // MARK: - Initialization
    
    init(presenter: ToDoListPresentProtocol) {
        self.presenter = presenter
        super.init(nibName: String(describing: ToDoListController.self), bundle: .main)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = viewBackgroundColor
        
        // —ç—Ç–æ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ `setTableView`. –∏ –µ—â–µ, —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–≤–æ–µ
        // `setupTableView` / `configureTableView`
        tableView.backgroundColor = viewBackgroundColor
        setTableView()
        
        // `setupNavigationItems`
        setNavigationItems()
        presenter?.makeDataSource(for: tableView)
        presenter?.makeSnapshot()
        presenter?.fetchTodos()
    }
    
    private func setNavigationItems() {
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addToDo))
    }
    
    // üí© addToDoAction
    @objc func addToDo(){
        coordinator?.showCreateViewController()
    }
    
    enum TableViewConstants {
        static let nib: UINib = Cell.nib()
        static let cellID: String = Cell.cellID
    } // –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É enum –∏ –º–µ—Ç–æ–¥–æ–º
    private func setTableView() {
        tableView.delegate = self
        tableView.register(TableViewConstants.nib, forCellReuseIdentifier: TableViewConstants.cellID)
    }
    
    // –¢—É—Ç –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ extension –∏ –ø–æ–º–µ—Ç–∏—Ç—å –º–∞—Ä–∫–æ–π —á—Ç–æ —ç—Ç–æ UITableViewDelegate
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let todoItem = presenter?.getToDoItem(at: indexPath) else { return }
        coordinator?.showEditViewController(todo: todoItem)
    }

    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        let header = view as! UITableViewHeaderFooterView
        header.textLabel?.textColor = .darkGray
    }
}

// –ö –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ñ–æ—Ä–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–∞—Ä–∫. –¢–∞–∫ –ª–µ–≥—á–µ –≤–∏–¥–µ—Ç—å –≤ –º–µ–Ω—é –Ω–∞–≤–∏–Ω–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞

extension ToDoListController: ToDoListControllerProtocol {
    
    // –ø–æ—á–µ–º—É `allow....Notification` ? –ê —á—Ç–æ –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ allow ? –ü–æ—á–µ–º—É –º–µ—Ç–æ–¥ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ? –û–Ω —á—Ç–æ, —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è–º ?
    func allowAccessToNotifications() {
        let alertController = UIAlertController(title: "Enable Notifications?".localized,
                                                message:  "To use this feature you must enable notifications in settings".localized,
                                                preferredStyle: .alert)
        
        // goToSettingsAction
        let goToSettings = UIAlertAction(title: "Settings".localized, style: .default) { _ in
            guard let settingsURL = URL(string: UIApplication.openSettingsURLString) else { return }
            if UIApplication.shared.canOpenURL(settingsURL) {
                UIApplication.shared.open(settingsURL)
            }
        }
        
        alertController.addAction(goToSettings)
        alertController.addAction(UIAlertAction(title: "Cancel".localized, style: .default))
        present(alertController, animated: true)
    }
} // Enter
extension ToDoListController: CreateViewControllerProtocol {
    func didCreateToDo(with item: ToDoItem) {
        presenter?.makeNotificationWith(title: item.title, description: item.description, date: item.date)
        presenter?.showToDo(with: item)
    }
}

extension ToDoListController: EditViewControllerProtocol {
    func didEditToDo(with todo: ToDoItem) {
        presenter?.makeNotificationWith(title: todo.title, description: todo.description, date: todo.date)
        presenter?.editToDo(with: todo)
    }
}
